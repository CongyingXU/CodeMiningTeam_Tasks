#Wed Dec 11 00:25:26 CST 2019

library.server.ip=http://127.0.0.1:8000
local.server.ip=http://127.0.0.1:8080
riskDB.server.ip=http://127.0.0.1:10080

# used by DE
pom.found.path=/data/pomFile/pom/
pom.unfound.path=/data/pomFile/pom_unfound/
project.repo.path=/data/repo/
dependency.raw.path=/data/dependency/raw/
dependency.jar.path=/data/dependency/parse2jar/
jar.file.path=/data/extractLib/jars/

# DA
dependency.tree.path=/data/inconsistency/tree/
dependency.tree.path.file=Tree_%s.json
dependency.mlib.path=/data/inconsistency/mlib/
dependency.mlib.path.file=Mlib_%s.json
local.cached.pom.label=$LOCAL_POM$

# used by ACE
project.call.raw.path=/data/api_call/call/
project.call.processed.path=/data/api_call/call_processed/
api.call.path=/data/api_call/api_call/

# used by LAE
# LAE模块Jar抽取API缓存目录
lib.api.path=/data/extractLib/lib_to_method/
# LAE模块Jar抽取API，存在exception的目录
lib.api.exception.path=/data/extractLib/exception/
# LAE模块Jar抽取API，存在error的目录
lib.api.error.path=/data/extractLib/error/
# LAE模块Jar抽取API，解压Jar包目录
lib.api.unzip.path=/data/extractLib/unzip/

# effort
effort.path=/data/effort/
call.graph.path=/data/effort/call_graph/

# harmo
xc.path=/data/xc/
xc.path.sl.raw=SL_RAW_%s.json
xc.path.sl=SL_%s.json
xc.path.ic=IC_%s.json
xc.path.ic.index=IC_INDEX_%s.json
xc.path.ic.action=IC_ACTION_%s.json
xc.path.fc=FC_%s.json
xc.path.tc=TC_%s.json

dot.path=/data/dot/
tainted.dot.path=/data/tainted_dot
tainted.dot.trim.path=/data/tainted_dot_trim
tainted.dot.trim.err.path=/data/tainted_dot_trim_err


picture.path=/data/picture/
pdf.path=/data/pdf/




# global
use.cache=false




# used by appHarmo
# appHarmo模块检查Method是否在lib中的结果缓存目录
methodInJar.cache.path = /data/methodInJarCache/
# appHarmo模块最后输出结果
lib.harmo.output.path = /data/lib_harmony/output/
# 反编译目录
decompile.path = /data/extractLib/decompile/
# 反编译工具路径
decompile.jar.path = /
# Jar包的第三方了依赖缓存目录
jar.dependency.cache.path = /data/extractLib/dependency/cache/
# 为了解析某个Jar包的三方库，创建临时Pom文件目录的路径
jar.dependency.temp.pom.path = /data/extractLib/dependency/temp_pom/input/
# 对 jar.dependency.temp.pom.path 路径中临时pom进行build，输出结果目录
jar.dependency.temp.pom.output.path = /data/extractLib/dependency/temp_pom/output/

# used by CallGraphGen
call_graph.output = /data/call_graph/
